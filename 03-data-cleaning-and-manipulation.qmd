---
execute:
  freeze: auto  # re-render only when source changes
  warning: false
  message: false
  editor: source
---

```{r}
#| echo: false

bytes <- file.size("03-data-cleaning-and-manipulation.qmd")
words <- bytes/10
minutes <- words/200
```

# Data Cleaning and Manipulation

```{r fa-setup}
#| include: false
library(quarto)
library(fontawesome)
library(ggplot2)
fa_html_dependency()
library(knitr)
library(kableExtra)
library(tidyverse)
# htmltools::tagList(rmarkdown::html_dependency_font_awesome())
```

`r fa("book-open")` Reading: `r ceiling(minutes)` minute(s) at 200 WPM.

`r fa("video")` Videos: 60 minutes

## Objectives {- #ch3-objectives}

-   Apply data manipulation verbs (filter, select, group by, summarize, mutate) to prepare data for analysis
-   Identify required sequence of steps for data cleaning
-   Describe step-by-step data cleaning process in lay terms appropriately and understand the consequences of data cleaning steps
-   Create summaries of data appropriate for analysis or display using data manipulation techniques

<!-- ::: check-in -->
<!-- ## Check-ins {- #ch3-checkins} -->

<!-- There is one check-in for this week: -->

<!-- -   [Check-in 3.1: Data Wrangling](#checkin3-1) -->
<!-- ::: -->

## A quick note about `tibble`

We have been talking about our data in terms of `data.frame` objects in R. This is meant to inform you there is another object type in R called `tibble`s. Essentially, Tibbles *are* data frames, but they have certain features that make them easier to work with and provide additional cool features that can be useful (e.g., see `nest()`).

```{r}
tibble(
  team   = c("A", "B", "C", "D"), 
  points = c(22, 30, 18, 54)
)
```

You can use `as_tibble()` to convert `data.frame` objects in R to a `tibble` object.

::: learn-more
### Learn more about tibbles {-}

You can read more about Tibbles in [R for Data Science: Tibbles](https://r4ds.had.co.nz/tibbles.html)
:::

## Introduction to `dplyr`

In this section, we're going start learning how to work with data. Generally speaking, data doesn't come in a form suitable for data visualization or statistical analysis[^03-data-cleaning-and-manipulation-1] - you have to clean it up, create the variables you care about, get rid of those you don't care about, and so on.

[^03-data-cleaning-and-manipulation-1]: See [this twitter thread](https://twitter.com/JennyBryan/status/722954354198597632) for some horror stories. [This tweet](https://twitter.com/jengolbeck/status/1153064308483510272?s=20) is also pretty good at showing one type of messiness.

Some people call the process of cleaning and organizing your data "data wrangling", which is a fantastic way to think about chasing down all of the issues in the data.

::: column-margin
![Data wrangling (by Allison Horst)](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-artwork/data_cowboy.png)
:::

We will be using the `tidyverse` for this. It's a meta-package (a package that just loads other packages) that collects packages designed with the same philosophy[^03-data-cleaning-and-manipulation-2] and interface (basically, the commands will use predictable argument names and structure). You've already been introduced to parts of the tidyverse - specifically, `readr` and `ggplot2`.

[^03-data-cleaning-and-manipulation-2]: The philosophy includes a preference for pipes, but this preference stems from the belief that code should be readable in the same way that text is readable.

`dplyr` (one of the packages in the tidyverse) creates a "grammar of data manipulation" to make it easier to describe different operations. I find the `dplyr` grammar to be extremely useful when talking about data operations.

::: column-margin
{{< video https://www.youtube.com/embed/jgVi2znoHgg >}} 
:::

Each `dplyr` verb describes a common task when doing both exploratory data analysis and more formal statistical modeling. In all tidyverse functions, **data comes first** -- literally, as it's the first argument to any function. In addition, you don't use `df$variable` to access a variable - you refer to the variable by its name alone ("bare" names). This makes the syntax much cleaner and easier to read, which is another principle of the tidy philosophy.

### Main `dplyr` verbs {-}

-   `filter()`
-   `arrange()`
-   `select()`
-   `mutate()`
-   `summarize()`
-   Use `group_by()` to perform group wise operations
-   Use the pipe operator (`|>` or `%>%`) to chain together data wrangling operations

::: note
[There is an excellent dplyr cheatsheet available from RStudio](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf). You may want to print it out to have a copy to reference as you work through this chapter.
:::

## Motivation & Example Dataset {-}

Last week we learned all about creating graphics in `ggplot2`. I am hoping to use data visualization as motivation going forward in this class -- **how do we get our data look like what we need in order to create the graph we want?**

::: ex
Let's explore how the `dplyr` verbs work, using the `starwars` data set, which contains a comprehensive list of the characters in the Star Wars movies and information about their `height`, `mass`, `hair_color`, `skin_color`, `eye_color`, `birth_year`, `sex`, `gender`, `homeworld`, `species`, `films`, `vehicles`, and `starships`.

This data set is included in the `dplyr` package, so we load that package and then use the `data()` function to load data set into memory. The loading isn't complete until we actually use the data set though... so let's look at our variables and types and print the first few rows.

```{r starwars-data-explore}
#| eval: false
library(dplyr)
data(starwars)
str(starwars)
starwars
```

```{r}
#| echo: false
library(dplyr)
data(starwars)
starwars <- starwars |>
  select(-c(films, vehicles, starships))
starwars |> 
  slice(1:10) |>
  kable(format = 'html') 
```

We could create a scatterplot of the character's `height` by `mass`, color by `species`, and facet by `homeworld`.

```{r}
#| message: false
#| warning: false
library(ggplot2)
ggplot(data = starwars, aes(x = height, 
                            y = mass, 
                            color = species)
       ) +
  geom_point() +
  facet_wrap(~ homeworld)
```

There is way too much going on in these plots to see anything of importance. Let's break it down into the parts we are interested in.
:::

## `filter()`: Pick cases (rows) based on their values

Filter allows us to work with a subset of a larger data frame, keeping only the rows we're interested in. We provide one or more logical conditions, and only those rows which meet the logical conditions are returned from `filter()`. Note that unless we store the result from `filter()` in the original object, we don't change the original.

::: column-margin
{{< video https://www.youtube.com/embed/pPI-prhLYqI >}} 
:::

![dplyr filter() by Allison Horst](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg){fig-alt="Cartoon showing three fuzzy monsters either selecting or crossing out rows of a data table. If the type of animal in the table is “otter” and the site is “bay”, a monster is drawing a purple rectangle around the row. If those conditions are not met, another monster is putting a line through the column indicating it will be excluded. Stylized text reads “dplyr::filter() - keep rows that satisfy your conditions.”"}

Once the data is set up, filtering the data (selecting certain **rows**) is actually very simple. Of course, we've talked about how to use logical indexing before in [Indexing Matrices](#indexing-matrices), but here we'll focus on using specific functions to perform the same operation.

The dplyr verb for selecting rows is `filter()`. `filter()` takes a set of one or more logical conditions, using bare column names and logical operators. Each provided condition is combined using AND.

::: ex
Let's say we were interested in only the people, we could create a new data set `starwars_people` and filter on the species variable.

```{r}
#| eval: false
# Get only the people
starwars_people <- filter(.data = starwars, 
                          species == "Human"
                          )
starwars_people
```

```{r}
#| echo: false
# Get only the people
starwars_people <- filter(starwars, species == "Human")
starwars_people  |>
  slice(1:5) |>
  kable(format = 'html') |>
  kable_styling() |>
  column_spec(column = 11, bold = T, color = "black", background = "yellow")
```

We can create the same plot with our new subset of data (`starwars_people`).

```{r}
#| message: false
#| warning: false
#| code-fold: true
ggplot(data = starwars_people, 
       mapping = aes(x = height, 
                     y = mass, 
                     color = species
                     )
       ) +
  geom_point() +
  facet_wrap(~ homeworld)
```

This looks better, but what if we only care about the people who come from Tatooine? Starting with our original starwars data set, we can combine logical AND statements with a comma to define a data subset called `starwars_tatoonie_people`.

```{r}
#| eval: false
# Get only the people who come from Tatooine
starwars_tatooine_people <- filter(.data = starwars, 
                                   species == "Human", 
                                   homeworld == "Tatooine"
                                   )
starwars_tatooine_people
```

```{r}
#| echo: false
# Get only the people who come from Tatooine
starwars_tatooine_people <- filter(starwars, species == "Human", homeworld == "Tatooine")
starwars_tatooine_people |>
  slice(1:5) |>
  kable(format = 'html') |>
  kable_styling() |>
  column_spec(column = c(10,11), bold = T, color = "black", background = "yellow")
```

```{r}
#| message: false
#| warning: false
#| code-fold: true
ggplot(data = starwars_tatooine_people, 
       mapping = aes(x = height, 
                     y = mass, 
                     color = species
                     )
       ) +
  geom_point() +
  facet_wrap(~ homeworld)
```
:::

<br>

::: note
#### Useful comparison operations in R {-}

We might not always want to only filter on a variable set equal to a certain category or value, the following operations can help you combine logical operations in `filter()`.

-   `>` greater than
-   `<` less than
-   `==` equal to
-   `%in%` identifies if an element belongs to a vector
-   `|` or
:::

### Common Row Selection Tasks

In `dplyr`, there are a few helper functions which may be useful when constructing filter statements.

::: column-margin
{{< video https://www.youtube.com/embed/4Qhdc81mpvo >}}
:::

#### Filtering by row number {-}

`row_number()` is a helper function that is only used inside of another dplyr function (e.g. filter). You might want to keep only even rows, or only the first 10 rows in a table.

::: ex
Notice how we now have C-3PO, Darth Vader, Beru Whites, Anakin Skywalker, etc. (rows 2, 4, 6, ...) from the original `starwars` data set output above.

```{r}
#| eval: false
filter(.data = starwars, 
       row_number() %% 2 == 0
       ) 
```

::: panel-tabset
##### Even Rows {-}

```{r}
#| echo: false
filter(starwars, row_number() %% 2 == 0)  |>
  slice(1:5) |>
  kable(format = 'html')
```

##### Original `starwars` {-}

```{r}
#| echo: false

starwars|>
  slice(1:10) |>
  kable(format = 'html') |>
  kable_styling() |>
  row_spec(c(2,4,6,8), bold = T, color = "black", background = "yellow")

```
:::
:::

#### `arrange()` Sorting rows by variable values {-}

Another common operation is to sort your data frame by the values of one or more variables.

`arrange()` is a dplyr verb for sorting rows in the table by one or more variables. It is often used with a helper function, `desc()`, which reverses the order of a variable, sorting it in descending order. Multiple arguments can be passed to `arrange` to sort the data frame by multiple columns hierarchically; each column can be modified with `desc()` separately.

::: ex
The code below arranges the starwars characters tallest to shortest.

```{r arrange-starwars-dplyr1}
#| eval: false
arrange(.data = starwars, 
        desc(height)
        )
```

```{r arrange-starwars-dplyr2}
#| echo: false
arrange(starwars, desc(height))   |>
  slice(1:10) |>
  kable(format = 'html') |>
  kable_styling() |>
  column_spec(column = 2, bold = T, color = "black", background = "yellow")
```
:::

#### Keep the top $n$ values of a variable {.unnumbered}

`slice_max()` will keep the top values of a specified variable. This is like a filter statement, but it's a shortcut built to handle a common task. You could write a filter statement that would do this, but it would take a few more lines of code.

::: ex
The code below outputs the 5 **tallest** characters in star wars.

```{r slice-starwars-arrange1}
#| eval: false
slice_max(.data = starwars, 
          order_by = height, 
          n = 5
          )
```

```{r slice-starwars-arrange2}
#| echo: false
slice_max(starwars, order_by = height, n = 5)  |>
  kable(format = 'html')
```
:::

Of course, there is a similar `slice_min()` function as well:

::: ex
The code below outputs the 5 **shortest** characters in star wars.

```{r slice-poke-arrange-31}
#| eval: false
slice_min(.data = starwars, 
          order_by = height, 
          n = 5
          )
```

```{r slice-poke-arrange-32}
#| echo: false
slice_min(starwars, order_by = height, n = 5)   |>
  kable(format = 'html')
```

By default, `slice_max()` and `slice_min()` return values tied with the nth value as well, which is why our result above has 6 rows.
:::

<br>

::: ex
Use `with_ties = FALSE`.

```{r}
#| eval: false
slice_min(.data = starwars, 
          order_by = height, 
          n = 5, 
          with_ties = FALSE
          )
```

```{r}
#| echo: false
slice_min(starwars, order_by = height, n = 5, with_ties = FALSE)   |>
  kable(format = 'html')
```
:::

`slice_max` and `slice_min` also take a `prop` argument that gives you a certain proportion of the values:

::: ex
The code below outputs the **shortest 2%** of characters in star wars.

```{r slice-starwars-arrange-41}
#| eval: false
slice_min(.data = starwars, 
          order_by = height, 
          prop = 0.02
          )
```

```{r slice-starwars-arrange-42}
#| echo: false
slice_min(starwars, order_by = height, prop = .02) |>
  kable(format = 'html')
```
:::

## `select()`: Pick columns

Sometimes, we don't want to work with a set of 50 variables when we're only interested in 5. When that happens, we might be able to pick the variables we want by index (e.g. `df[, c(1, 3, 5)]`), but this can get tedious.

In `dplyr`, the function to pick a few columns is `select()`. The syntax from the help file (`?select`) looks deceptively simple.

> select(.data, ...)

So as with just about every other tidyverse function, the first argument in a select statement is the data (`.data = `). After that, though, you can put just about anything that R can interpret. `...` means something along the lines of "put in any additional arguments that make sense in context or might be passed on to other functions".

So what can go in there?

</details>

<details class="note">

<summary>An exhaustive(?) list of ways to select variables in `dplyr`</summary>

First, dplyr aims to work with standard R syntax, making it intuitive (and also, making it work with variable names instead of just variable indices).[^03-data-cleaning-and-manipulation-3]\
Most `dplyr` commands work with "bare" variable names - you don't need to put the variable name in quotes to reference it. There are a few exceptions to this rule, but they're very explicitly exceptions.

[^03-data-cleaning-and-manipulation-3]: It accomplishes this through the magic of quasiquotation, which we will not cover in this course because it's basically witchcraft.

-   `var3:var5`: `select(df, var3:var5)` will give you a data frame with columns var3, anything between var3 and var 5, and var5

-   `!(<set of variables>)` will give you any columns that aren't in the set of variables in parentheses

    -   `(<set of vars 1>) & (<set of vars 2>)` will give you any variables that are in both set 1 and set 2. `(<set of vars 1>) | (<set of vars 2>)` will give you any variables that are in either set 1 or set 2.
    -   `c()` combines sets of variables.

`dplyr` also defines a lot of variable selection "helpers" that can be used inside `select()` statements. These statements work with bare column names (so you don't have to put quotes around the column names when you use them).

-   `everything()` matches all variables
-   `last_col()` matches the last variable. `last_col(offset = n)` selects the n-th to last variable.
-   `starts_with("xyz")` will match any columns with names that start with xyz. Similarly, `ends_with()` does exactly what you'd expect as well.
-   `contains("xyz")` will match any columns with names containing the literal string "xyz". Note, `contains` does not work with regular expressions (you don't need to know what that means right now).
-   `matches(regex)` takes a regular expression as an argument and returns all columns matching that expression.
-   `num_range(prefix, range)` selects any columns that start with prefix and have numbers matching the provided numerical range.

There are also selectors that deal with character vectors. These can be useful if you have a list of important variables and want to just keep those variables.

-   `all_of(char)` matches all variable names in the character vector `char`. If one of the variables doesn't exist, this will return an error.
-   `any_of(char)` matches the contents of the character vector `char`, but does not throw an error if the variable doesn't exist in the data set.

There's one final selector -

-   `where()` applies a function to each variable and selects those for which the function returns TRUE. This provides a lot of flexibility and opportunity to be creative.

</details>

Let's try these selector functions out and see what we can accomplish!

<!-- ::: ex -->

<!-- We'll start out with the `nycflights13` package, which contains information on all flights that left a NYC airport to destinations in the US, Puerto Rico, and the US Virgin Islands. -->

<!-- ```{r nycflightsinstall} -->

<!-- library(nycflights13) -->

<!-- data(flights) -->

<!-- str(flights) -->

<!-- ``` -->

<!-- ::: -->

<!-- <br> -->

<!-- ::: note -->

<!-- You might want to try out your data visualization and exploratory data analysis skills from the previous module to see what you can find out about the data set, before seeing how `select()` works. -->

<!-- ::: -->

::: ex
Starting simple, let's only subset and keep only the following variables from the `starwars` data set: `name`, `height`, `mass`, `birth_year`, `species`, and `homeworld`.

```{r}
#| eval: false
select(.data = starwars, name, height, mass, birth_year, species, homeworld)
```

```{r}
#| echo: false
select(starwars, name, height, mass, birth_year, species, homeworld)  |>
  slice(1:10) |> 
  kable(format = 'html')
```

Since `name`, `height`, and `mass` are next to each other, we could have specified `name:mass` to tell us to select all of the columns between and including `name` to `mass`.

```{r}
#| eval: false
select(.data = starwars, name:mass, birth_year, species, homeworld)
```

```{r}
#| echo: false
select(starwars, name:mass, birth_year, species, homeworld)   |>
  slice(1:10) |> 
  kable(format = 'html')
```


The select column is also useful for reordering the variables in your data set.



Perhaps we want the `birth_year`, `sex`, `gender`, `homeworld`, and `species` to follow the `name` of the star wars character. We can use the `everything()` function to specify we want all the other variables to follow.

```{r}
#| eval: false
select(.data = starwars, name, birth_year:species, everything())
```

```{r}
#| echo: false
select(starwars, name, birth_year:species, everything())   |>
  slice(1:10) |> 
  kable(format = 'html')
```

Note that `everything()` won't duplicate columns you've already added.

:::

So for now, at least in R, you know how to cut your data down to size rowwise (with `filter`) and column-wise (with `select`).

<details class="note">

<summary>dplyr::relocate</summary>

Another handy `dplyr` function is `relocate`; while you definitely can do this operation in many, many different ways, it may be simpler to do it using relocate. But, I'm covering relocate here mostly because it also comes with this amazing cartoon illustration.

![relocate lets you rearrange columns (by Allison Horst)](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_relocate.png)

```{r relocate-dplyr}
# move numeric variables to the front
relocate(.data = starwars, 
         where(is.numeric)
         )
```

</details>

## `mutate()`: Add and transform variables

Up to this point, we've been primarily focusing on how to decrease the dimensionality of our data set in various ways (i.e., remove rows or columns from the original data set). But frequently, we also need to add columns for derived measures (e.g. BMI from weight and height information), change units, and replace missing or erroneous observations. The tidyverse verb for this is `mutate()`.

::: column-margin
{{< video https://www.youtube.com/embed/QWyUnQ2EzPs >}} 
:::

![Mutate (by Allison Horst)](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png)

::: ex
Let's create a new variable, `BMI` calculated from existing columns -- `mass`/`height`$^2$

```{r}
#| eval: false
mutate(.data = starwars, 
       BMI = mass/height^2, 
       .after = mass
       )
```

```{r}
#| echo: false
mutate(starwars, BMI = mass/height^2, .after = mass)   |>
  slice(1:10) |> 
  kable(format = 'html')
```

By default, the new variable will be tacked on to the end of the data set as the last column. Using `.after` or `.before` arguments allows you to place the new variable in the middle of the data set.
:::

We can combine the `mutate` function with other variables such as `ifelse()`.

::: ex
Let's replace the species variable to indicate `Human` or `Not Human`.

```{r}
#| eval: false
mutate(.data = starwars, 
       species = if_else(species == "Human", 
                        species, 
                        "Not Human"
                        )
       )
```

```{r}
#| echo: false
mutate(starwars, 
       species = if_else(species == "Human", species, "Not Human")
)   |>
  slice(1:10) |> 
  kable(format = 'html')
```
:::

The learning curve here isn't actually knowing how to assign new variables (though that's important). The challenge comes when you want to do something *new* and have to figure out how to e.g. use find and replace in a string, or work with dates and times, or recode variables. We will cover special data types like these in a few weeks!

<details class="note">

<summary>Mutate and new challenges</summary>

I'm not going to be able to teach you how to handle every mutate statement task you'll come across (people invent new ways to screw up data all the time!) but my goal is instead to teach you how to *read documentation* and *Google things intelligently*, and to *understand what you're reading* enough to actually implement it. This is something that comes with practice (and lots of Googling, stack overflow searches, etc.).

Google and StackOverflow are very common and important programming skills!

![[Source](https://twitter.com/madsbrodt/status/1339127984670773251)](images/03-data-cleaning-and-manipulation/twitter-google-stackoverflow.png){fig-alt="A screenshot of a tweet from @madsbrodt. Tweet text: Googling and StackOverflow'ing is a natural part of programming. Don't think of it as cheating. Knowing what to search for, and which results will fit your given situation is an important skill (flame emoji)."}

![[Source](https://twitter.com/cszhu/status/1230954186520461312)](images/03-data-cleaning-and-manipulation/twitter-happy-debugging.png){fig-alt="A screenshot of a tweet from @cszhu. Tweet text: if you're not happy single, you won't be happy in a relationship. true happiness comes from closing 100 chrome tabs after solving an obscure programming bug, not from someone else."}

In this textbook, the examples will expose you to solutions to common problems (or require that you do some basic reading yourself); unfortunately, there are too many common problems for us to work through line-by-line.

Part of the goal of this textbook is to help you **learn how to read through a package description and evaluate whether the package will do what you want**. We're going to try to build some of those skills starting now. It would be relatively easy to teach you how to do a set list of tasks, but you'll be better statisticians and programmers if you learn the skills to solve niche problems on your own.

![Apologies for the noninclusive language, but the sentiment is real. [Source](https://twitter.com/abt_programming/status/459414524303785984)](images/03-data-cleaning-and-manipulation/twitter-teach-program.png){fig-alt="A screenshot of a tweet from @abt_programming. Tweet text: Give a man a program, frustrate him for a day.Teach a man to program, frustrate him for a lifetime - Muhammad Waseem."}

</details>

## `summarize()`

The next verb is one that we've already implicitly seen in action: `summarize()` takes a data frame with potentially many rows of data and reduces it down to one row of data using some function.

::: column-margin
{{< video https://www.youtube.com/embed/mIGu8gxx3CM >}} 
:::

::: ex
Here (in a trivial example), I compute the overall average height of a star war's character.

```{r summarize, cache = F}
summarize(.data = starwars,
          avg_height = mean(height, na.rm = T)
          )
```

The `na.rm = T` argument says to ignore/remove the missing (NA) values in calculating the average.
:::

The real power of summarize, though, is in combination with `group_by`. We'll see more summarize examples, but it's easier to make good examples when you have all the tools - it's hard to demonstrate how to use a hammer if you don't also have a nail.

## `group_by()` Group By + (?) = Power!

Frequently, we have data that is more specific than the data we need - for instance, I may have observations of the temperature at 15-minute intervals, but I might want to record the daily high and low value. To do this, I need to

::: column-margin
{{< video https://www.youtube.com/embed/3SWgEe9wJSE >}} 
:::

1.  split my data set into smaller data sets - one for each day
2.  compute summary values for each smaller data set
3.  put my summarized data back together into a single data set

This is known as the `split-apply-combine` [@wickhamSplitapplycombineStrategyData2011,@GroupSplitapplycombine2022] or sometimes, `map-reduce` [@deanMapReduceSimplifiedData2008] strategy (though map-reduce is usually on specifically large data sets and performed in parallel).

In tidy parlance, `group_by()` is the verb that accomplishes the first task. `summarize()` accomplishes the second task and implicitly accomplishes the third as well.

::: ex
Let's see how things change when we calculate the average height of star wars characters by their species.

```{r summarize2}
starwars |> 
  group_by(species) |> 
  summarize(height = mean(height, na.rm = T))
```

The next section [Pipe Operator](#pipe) will introduce and talk about what the `|>` symbol is, this example is just hard to show without it!
:::

<br>

::: column-margin
![The ungroup() command is just as important as the group_by() command! (by Allison Horst)](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-blanks/ungroup_blank.png)
:::

When you `group_by()` a variable, your result carries this grouping with it. `summarize()` will remove one layer of grouping (by default), but if you ever want to return to a completely ungrouped data set, you should use the `ungroup()` command.

## Pipe Operator {#pipe}

The powerhouse of the `tidyverse` package comes from the pipe operator. This specifies a sequence of operations (kind of like how we layered our graphics in `ggplot2`). The output from the previous line (often a subset) is automatically passed into the first argument of the next line (remember, data first! `.data =`).

The native pipe operator is `|>`, but the magrittr pipe operator `%>%` was used up until recently (and still is often used!).

::: column-margin
{{< video https://www.youtube.com/embed/RhHMgkUdhdk >}} 

<br>

{{< video https://www.youtube.com/embed/QLtiC4LCxSo >}} 
:::

::: note
The keyboard shortcut for adding a pipe operator to your code is `Ctrl/Cmd` + `Shift` + `M`.

However, if you want to use this shortcut for the native pipe, you need to change your global R settings:

`Tools > Global Options > Code > checkbox Use native pipe operator, |>`
:::

<br>

::: go-read
(required) Read more about the pipe operators at [Workflow Pipes](https://r4ds.hadley.nz/data-transform.html#sec-the-pipe) and [Formatting Pipes](https://r4ds.hadley.nz/workflow-style.html#sec-pipes).

<br>
:::

<br>

Let's combine all of our new skills with the pipe operator!

::: ex
1.  Use `filter()` to subset our data to only `Human`'s and `Droid`'s
2.  Use `mutate()` to create the new variable, `BMI`,
3.  Use `group_by()` to create groups by species,
4.  Use `summarize()` to calculate the mean and standard deviation of `BMI`
5.  Use `mutate()` to calculate the average plus/minus one standard deviation.

We could either assign this new data set that has summary values of BMI by species or we could pipe the data set directly into a plot -- recall the first argument for `ggplot()` is `data =`.

```{r}
starwars |> 
  filter(species %in% c("Human", "Droid")) |> 
  mutate(BMI = mass/height^2) |> 
  group_by(species) |> 
  summarize(avg_BMI = mean(BMI, na.rm = TRUE),
            sd_BMI = sd(BMI, na.rm = TRUE)
            ) |> 
  mutate(BMI_1sd_below = avg_BMI - sd_BMI,
         BMI_1sd_above = avg_BMI + sd_BMI
         ) |> 
  ggplot(aes(x = species, 
             y = avg_BMI)
         ) +
  geom_point() +
  geom_errorbar(aes(ymin = BMI_1sd_below,
                    ymax = BMI_1sd_above),
                width = 0.2
                ) +
  labs(x = "Species", 
       subtitle = "Average BMI") +
  theme(axis.title.y = element_blank())
  
```

As with ggplot, formatting your `dplyr` code pipelines so it is readable will help both you and me!
:::

<br>

<!-- ::: check-in -->
<!-- ## Check-in 3.1: Data Wrangling {#checkin3-1 .unnumbered} -->

<!-- **Q1: Arrange the pipeline** -->

<!-- Working with the Palmer Penguins data set: -->

<!-- ```{r} -->
<!-- library(palmerpenguins) -->
<!-- data(penguins) -->
<!-- head(penguins) -->
<!-- ``` -->

<!-- Suppose we would like to study how the ratio of penguin body mass to flipper size differs across the species. Arrange the following steps into an order that accomplishes this goal (assuming the steps are connected with a \|\> or a %\>%). -->

<!-- `arrange(med_mass_flipper_ratio)` -->

<!-- `group_by(species)` -->

<!-- `penguins` -->

<!-- `summarize(med_mass_flipper_ratio = median(mass_flipper_ratio))` -->

<!-- `mutate(mass_flipper_ratio = body_mass_g / flipper_length_mm)` -->

<!-- <br> -->

<!-- **Q2 - Q7: `dplyr` pipelines** -->

<!-- Consider the base R code below. -->

<!-- ```{r} -->
<!-- mean(penguins[penguins$species == "Adelie", ]$body_mass_g, na.rm = T) -->
<!-- ``` -->

<!-- For each of the following `dplyr` pipelines, indicate which of the following is true: -->

<!-- i)  It returns the exact same thing as the (above) base R code -->

<!-- ii) It returns the correct information, but the wrong object type -->

<!-- iii) It returns incorrect information -->

<!-- iv) It returns an error -->

<!-- **Q2** -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- penguins  |> -->
<!--   filter("body_mass_g") |> -->
<!--   pull("Adelie") |> -->
<!--   mean(na.rm = T) -->
<!-- ``` -->

<!-- **Q3** -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- penguins |> -->
<!--   filter(species == "Adelie") |> -->
<!--   select(body_mass_g) |> -->
<!--   summarize(mean(body_mass_g, na.rm = T)) -->
<!-- ``` -->

<!-- **Q4** -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- penguins |> -->
<!--   pull(body_mass_g) |> -->
<!--   filter(species == "Adelie") |> -->
<!--   mean(na.rm = T) -->
<!-- ``` -->

<!-- **Q5** -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- penguins |> -->
<!--   filter(species == "Adelie") |> -->
<!--   select(body_mass_g) |> -->
<!--   mean(na.rm = T) -->
<!-- ``` -->

<!-- **Q6** -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- penguins |> -->
<!--   filter(species == "Adelie") |> -->
<!--   pull(body_mass_g) |> -->
<!--   mean(na.rm = T) -->
<!-- ``` -->

<!-- **Q7** -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- penguins |> -->
<!--   select(species == "Adelie") |> -->
<!--   filter(body_mass_g) |> -->
<!--   summarize(mean(body_mass_g, na.rm = T)) -->
<!-- ``` -->
<!-- ::: -->

<br>

::: learn-more
## Additional Resources {-}

-   [Introduction to dplyr](https://stat545.com/dplyr-intro.html) and [Single Table dplyr functions](https://stat545.com/dplyr-single.html)

-   R for Data Science: [Data Transformations](https://r4ds.hadley.nz/data-transform.html)

-   Modern Dive: [Data Wrangling](https://moderndive.com/3-wrangling.html#wrangling)

-   Additional practice exercises: [Intro to the tidyverse](https://stat579-at-isu.github.io/materials/03_tidyverse/01_dplyr.html#19), [group_by + summarize examples](https://stat579-at-isu.github.io/materials//03_tidyverse/02_dplyr-examples.html), [group_by + mutate examples](https://stat579-at-isu.github.io/materials//03_tidyverse/03_dplyr-examples.html#1) (from a similar class at Iowa State)

-   [Videos of analysis of new data from Tidy Tuesday](https://www.youtube.com/playlist?list=PL19ev-r1GBwkuyiwnxoHTRC8TTqP8OEi8) - may include use of other packages, but almost definitely includes use of `dplyr` as well.
:::

<br>

<!-- ::: tryitout -->
<!-- ## PA 3: Identify the Mystery College {-} -->

<!-- Today you will be using the `dplyr` package to clean a data set and then using that cleaned data set to figure out what college Ephelia has been accepted to. -->

<!-- Visit [PA 3: Identify the Mystery College](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA3-find-the-mystery-college) for instructions. -->

<!-- Submit the full name of the college Ephelia will attend to the Canvas Quiz. -->
<!-- ::: -->

## References {-}
